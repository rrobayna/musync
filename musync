#!/bin/bash
#####################################
# converts .flac to .mp3 recursively
# cleans text, jpg and other unused files from the source
# rsync files to a remote filesystem
# written by: Rafael L Robayna <rrobayna@gmail.com>
#
# Running the script for the first time will generate a .musync config file
# in your home directory.  Edit this config to set your source and destination
# directories.
#
# Optional Parameters:
# $1 = _SOURCE
# $2 = _DEST
#
# Executing the script with parameters will bypass parameters set in ~/.musync
#
# Todo:
# - add support for converting other formats to mp3
# - add functionality to fix playlists so they are always relative
# - add functionality to check if mp3 tags are set and return a warning
#
# Requirements:
# ffmpeg, rsync
#####################################

_CONFIG=$HOME/.musync

# Create ~/.musync config if dosen't exist
if [ ! -f $_CONFIG ]; then
    touch $_CONFIG
    echo "_SOURCE=" >> $_CONFIG
    echo "_DEST=" >> $_CONFIG
fi

# Includes
. $_CONFIG

# Check for _SOURCE and _DEST overrides passed to the script
[ $# -gt 0 ] && [ -d $1 ] && _SOURCE=$1
[ $# -gt 1 ] && [ -d $2 ] && _DEST=$2

# Remove Training Blackslashes
_SOURCE=${_SOURCE%/}
_DEST=${_DEST%/}

# Clean folder and all subfolders of extra files
#
# @param string path
# @return void
###
clean() {
	if [[ -z "$1" ]] || [ ! -d "$1" ]; then
		echo "Error: Clean path invalid $1"; exit 1
	fi

	echo "######################################"
	echo "# Scanning path to clean junk files"

	#find "$1" -name *.m3u -print0 | xargs -0 rm -rf
	#find "$1" -name ".DS_Store" -print0 | xargs -0 rm -rf
	find "$1" -name ".thumbnails" -print0 | xargs -0 rm -rf
	find "$1" -name ".webviews" -print0 | xargs -0 rm -rf
	find "$1" -name *.jpg -print0 | xargs -0 rm -rf
	find "$1" -name *.jpeg -print0 | xargs -0 rm -rf
	find "$1" -name *.png -print0 | xargs -0 rm -rf
	find "$1" -name *.txt -print0 | xargs -0 rm -rf
	find "$1" -name *.pdf -print0 | xargs -0 rm -rf
	find "$1" -name *.nfo -print0 | xargs -0 rm -rf
	find "$1" -name *.url -print0 | xargs -0 rm -rf
	find "$1" -name *.sfv -print0 | xargs -0 rm -rf
	find "$1" -name *.zip -print0 | xargs -0 rm -rf
	find "$1" -name *.cue -print0 | xargs -0 rm -rf
	find "$1" -name ._* -print0 | xargs -0 rm -rf
	find "$1" -type d -empty -exec echo Removing empty directory {} \; -exec rmdir {} \; 2> /dev/null
	echo "######################################"
	echo ""
}


###
# Recursively search the path for flac audio and convert it to mp3
#
# @param string path
# @return void
###
convert() {

	if [[ -z "$1" ]] || [ ! -d "$1" ]; then
		echo "Error: Convert path invalid $1"; exit 1
	fi

	echo "######################################"
	echo "# Scanning path to convert audio"
	echo "# "

	###
	# Root directory path
	# @param string
	###
	_path="$1"

	###
	# MP3 encoding bitrate
	# @param string
	###
	_bitrate=320k
	if [[ $# -ge 2 ]]; then
		_bitrate="$2"
	fi

	###
	# Delete origional file
	# @param boolean
	###
	_delete_origional=true
	if [[ $# -ge 3 ]]; then
		_delete_origional="$3"
	fi

	_count=0

	# @alt find -E $_path -type f -iregex '.*\.(flac|wma)$' | while read file; do
	find "$_path" -type f -iname '*.flac' | while read file; do

		_filepath="${file%.[Ff][Ll][Aa][Cc]}"
		_newfile="$_filepath.mp3"

		# Don't overwrite exiting mp3
		[ -f "$_newfile" ] && continue

		echo "# "
		echo "# Converting: $file"
		echo "# "

		ffmpeg -i "$file" -ab "$_bitrate" -vsync 2 "$_newfile" < /dev/null > /dev/null
		wait

		[ "$_delete_origional" = false ] && continue

		# Check that the old file is safe to delete
		_oldfile_size=$(du -k "$file" | cut -f 1)
		_expected_size=$(( $_oldfile_size / 10 ))
		_file_size=$(du -k "$_newfile" | cut -f 1)
		if [[ -z "$_file_size" ]]; then _file_size=1; fi
		if [ $_file_size -gt $_expected_size ]; then
			rm "$file"
			_count=$(($_count + 1))
		else
			echo "Error encoding file: $_newfile"
			exit 0
		fi

	done

	echo "# $_count files converted to mp3"
	echo "######################################"
	echo ""

}

# Check that ffmpeg is installed
hash ffmpeg 2>/dev/null || { echo >&2 "Error: ffmpeg not found, aborting sync..."; exit 1; }

if [[ -z "$_SOURCE" ]] || [ ! -d "$_SOURCE" ]; then
    echo "Error: Source directory invalid $_SOURCE"
    echo "Aborting source processing"
else
    convert "$_SOURCE"
    clean "$_SOURCE"
fi

if [[ -z "$_DEST" ]] || [ ! -d "$_DEST" ]; then
    echo "Error: destination directory invalid $_DEST"
    echo "Aborting sync"
else
    rsync -rvc --delete-before "$_SOURCE" "$_DEST"
    clean "$_DEST"
fi
